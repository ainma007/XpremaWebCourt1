#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="CourtData")]
public partial class DbDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InsertAttachment(Attachment instance);
  partial void UpdateAttachment(Attachment instance);
  partial void DeleteAttachment(Attachment instance);
  partial void InsertClient(Client instance);
  partial void UpdateClient(Client instance);
  partial void DeleteClient(Client instance);
  partial void InsertCourthearing(Courthearing instance);
  partial void UpdateCourthearing(Courthearing instance);
  partial void DeleteCourthearing(Courthearing instance);
  partial void InsertEmployee(Employee instance);
  partial void UpdateEmployee(Employee instance);
  partial void DeleteEmployee(Employee instance);
  partial void InsertFollowUpIssue(FollowUpIssue instance);
  partial void UpdateFollowUpIssue(FollowUpIssue instance);
  partial void DeleteFollowUpIssue(FollowUpIssue instance);
  partial void InsertInBox(InBox instance);
  partial void UpdateInBox(InBox instance);
  partial void DeleteInBox(InBox instance);
  partial void InsertIssueLevel(IssueLevel instance);
  partial void UpdateIssueLevel(IssueLevel instance);
  partial void DeleteIssueLevel(IssueLevel instance);
  partial void InsertIssue(Issue instance);
  partial void UpdateIssue(Issue instance);
  partial void DeleteIssue(Issue instance);
  partial void InsertLawyer(Lawyer instance);
  partial void UpdateLawyer(Lawyer instance);
  partial void DeleteLawyer(Lawyer instance);
  partial void InsertOpponent(Opponent instance);
  partial void UpdateOpponent(Opponent instance);
  partial void DeleteOpponent(Opponent instance);
  partial void InsertOutBox(OutBox instance);
  partial void UpdateOutBox(OutBox instance);
  partial void DeleteOutBox(OutBox instance);
  partial void InsertUser(User instance);
  partial void UpdateUser(User instance);
  partial void DeleteUser(User instance);
  #endregion
	
	public DbDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["CourtDataConnectionString"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public DbDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DbDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DbDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DbDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<Attachment> Attachments
	{
		get
		{
			return this.GetTable<Attachment>();
		}
	}
	
	public System.Data.Linq.Table<Client> Clients
	{
		get
		{
			return this.GetTable<Client>();
		}
	}
	
	public System.Data.Linq.Table<Courthearing> Courthearings
	{
		get
		{
			return this.GetTable<Courthearing>();
		}
	}
	
	public System.Data.Linq.Table<Employee> Employees
	{
		get
		{
			return this.GetTable<Employee>();
		}
	}
	
	public System.Data.Linq.Table<FollowUpIssue> FollowUpIssues
	{
		get
		{
			return this.GetTable<FollowUpIssue>();
		}
	}
	
	public System.Data.Linq.Table<InBox> InBoxes
	{
		get
		{
			return this.GetTable<InBox>();
		}
	}
	
	public System.Data.Linq.Table<IssueLevel> IssueLevels
	{
		get
		{
			return this.GetTable<IssueLevel>();
		}
	}
	
	public System.Data.Linq.Table<Issue> Issues
	{
		get
		{
			return this.GetTable<Issue>();
		}
	}
	
	public System.Data.Linq.Table<Lawyer> Lawyers
	{
		get
		{
			return this.GetTable<Lawyer>();
		}
	}
	
	public System.Data.Linq.Table<Opponent> Opponents
	{
		get
		{
			return this.GetTable<Opponent>();
		}
	}
	
	public System.Data.Linq.Table<OutBox> OutBoxes
	{
		get
		{
			return this.GetTable<OutBox>();
		}
	}
	
	public System.Data.Linq.Table<User> Users
	{
		get
		{
			return this.GetTable<User>();
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Attachment")]
public partial class Attachment : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private System.Data.Linq.Binary _ImageX;
	
	private int _IssueId;
	
	private System.Nullable<System.DateTime> _DateOfProcess;
	
	private EntityRef<Issue> _Issue;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnImageXChanging(System.Data.Linq.Binary value);
    partial void OnImageXChanged();
    partial void OnIssueIdChanging(int value);
    partial void OnIssueIdChanged();
    partial void OnDateOfProcessChanging(System.Nullable<System.DateTime> value);
    partial void OnDateOfProcessChanged();
    #endregion
	
	public Attachment()
	{
		this._Issue = default(EntityRef<Issue>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImageX", DbType="VarBinary(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
	public System.Data.Linq.Binary ImageX
	{
		get
		{
			return this._ImageX;
		}
		set
		{
			if ((this._ImageX != value))
			{
				this.OnImageXChanging(value);
				this.SendPropertyChanging();
				this._ImageX = value;
				this.SendPropertyChanged("ImageX");
				this.OnImageXChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IssueId", DbType="Int NOT NULL")]
	public int IssueId
	{
		get
		{
			return this._IssueId;
		}
		set
		{
			if ((this._IssueId != value))
			{
				if (this._Issue.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnIssueIdChanging(value);
				this.SendPropertyChanging();
				this._IssueId = value;
				this.SendPropertyChanged("IssueId");
				this.OnIssueIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfProcess", DbType="DateTime")]
	public System.Nullable<System.DateTime> DateOfProcess
	{
		get
		{
			return this._DateOfProcess;
		}
		set
		{
			if ((this._DateOfProcess != value))
			{
				this.OnDateOfProcessChanging(value);
				this.SendPropertyChanging();
				this._DateOfProcess = value;
				this.SendPropertyChanged("DateOfProcess");
				this.OnDateOfProcessChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Issue_Attachment", Storage="_Issue", ThisKey="IssueId", OtherKey="Id", IsForeignKey=true)]
	public Issue Issue
	{
		get
		{
			return this._Issue.Entity;
		}
		set
		{
			Issue previousValue = this._Issue.Entity;
			if (((previousValue != value) 
						|| (this._Issue.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Issue.Entity = null;
					previousValue.Attachments.Remove(this);
				}
				this._Issue.Entity = value;
				if ((value != null))
				{
					value.Attachments.Add(this);
					this._IssueId = value.Id;
				}
				else
				{
					this._IssueId = default(int);
				}
				this.SendPropertyChanged("Issue");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Clients")]
public partial class Client : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private string _ClientName;
	
	private string _Described;
	
	private string _Address;
	
	private string _IdNumber;
	
	private string _Phone;
	
	private string _Email;
	
	private EntitySet<FollowUpIssue> _FollowUpIssues;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnClientNameChanging(string value);
    partial void OnClientNameChanged();
    partial void OnDescribedChanging(string value);
    partial void OnDescribedChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnIdNumberChanging(string value);
    partial void OnIdNumberChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    #endregion
	
	public Client()
	{
		this._FollowUpIssues = new EntitySet<FollowUpIssue>(new Action<FollowUpIssue>(this.attach_FollowUpIssues), new Action<FollowUpIssue>(this.detach_FollowUpIssues));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
	public string ClientName
	{
		get
		{
			return this._ClientName;
		}
		set
		{
			if ((this._ClientName != value))
			{
				this.OnClientNameChanging(value);
				this.SendPropertyChanging();
				this._ClientName = value;
				this.SendPropertyChanged("ClientName");
				this.OnClientNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Described", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
	public string Described
	{
		get
		{
			return this._Described;
		}
		set
		{
			if ((this._Described != value))
			{
				this.OnDescribedChanging(value);
				this.SendPropertyChanging();
				this._Described = value;
				this.SendPropertyChanged("Described");
				this.OnDescribedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
	public string Address
	{
		get
		{
			return this._Address;
		}
		set
		{
			if ((this._Address != value))
			{
				this.OnAddressChanging(value);
				this.SendPropertyChanging();
				this._Address = value;
				this.SendPropertyChanged("Address");
				this.OnAddressChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdNumber", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
	public string IdNumber
	{
		get
		{
			return this._IdNumber;
		}
		set
		{
			if ((this._IdNumber != value))
			{
				this.OnIdNumberChanging(value);
				this.SendPropertyChanging();
				this._IdNumber = value;
				this.SendPropertyChanged("IdNumber");
				this.OnIdNumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NVarChar(20)")]
	public string Phone
	{
		get
		{
			return this._Phone;
		}
		set
		{
			if ((this._Phone != value))
			{
				this.OnPhoneChanging(value);
				this.SendPropertyChanging();
				this._Phone = value;
				this.SendPropertyChanged("Phone");
				this.OnPhoneChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(150)")]
	public string Email
	{
		get
		{
			return this._Email;
		}
		set
		{
			if ((this._Email != value))
			{
				this.OnEmailChanging(value);
				this.SendPropertyChanging();
				this._Email = value;
				this.SendPropertyChanged("Email");
				this.OnEmailChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_FollowUpIssue", Storage="_FollowUpIssues", ThisKey="Id", OtherKey="ClientId")]
	public EntitySet<FollowUpIssue> FollowUpIssues
	{
		get
		{
			return this._FollowUpIssues;
		}
		set
		{
			this._FollowUpIssues.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_FollowUpIssues(FollowUpIssue entity)
	{
		this.SendPropertyChanging();
		entity.Client = this;
	}
	
	private void detach_FollowUpIssues(FollowUpIssue entity)
	{
		this.SendPropertyChanging();
		entity.Client = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Courthearings")]
public partial class Courthearing : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private System.Nullable<int> _IssueId;
	
	private System.Nullable<System.DateTime> _StartAt;
	
	private System.Nullable<System.DateTime> _FinishAt;
	
	private string _Comment;
	
	private string _Status;
	
	private EntityRef<Issue> _Issue;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIssueIdChanging(System.Nullable<int> value);
    partial void OnIssueIdChanged();
    partial void OnStartAtChanging(System.Nullable<System.DateTime> value);
    partial void OnStartAtChanged();
    partial void OnFinishAtChanging(System.Nullable<System.DateTime> value);
    partial void OnFinishAtChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    #endregion
	
	public Courthearing()
	{
		this._Issue = default(EntityRef<Issue>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IssueId", DbType="Int")]
	public System.Nullable<int> IssueId
	{
		get
		{
			return this._IssueId;
		}
		set
		{
			if ((this._IssueId != value))
			{
				if (this._Issue.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnIssueIdChanging(value);
				this.SendPropertyChanging();
				this._IssueId = value;
				this.SendPropertyChanged("IssueId");
				this.OnIssueIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartAt", DbType="DateTime")]
	public System.Nullable<System.DateTime> StartAt
	{
		get
		{
			return this._StartAt;
		}
		set
		{
			if ((this._StartAt != value))
			{
				this.OnStartAtChanging(value);
				this.SendPropertyChanging();
				this._StartAt = value;
				this.SendPropertyChanged("StartAt");
				this.OnStartAtChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FinishAt", DbType="DateTime")]
	public System.Nullable<System.DateTime> FinishAt
	{
		get
		{
			return this._FinishAt;
		}
		set
		{
			if ((this._FinishAt != value))
			{
				this.OnFinishAtChanging(value);
				this.SendPropertyChanging();
				this._FinishAt = value;
				this.SendPropertyChanged("FinishAt");
				this.OnFinishAtChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="NVarChar(MAX)")]
	public string Comment
	{
		get
		{
			return this._Comment;
		}
		set
		{
			if ((this._Comment != value))
			{
				this.OnCommentChanging(value);
				this.SendPropertyChanging();
				this._Comment = value;
				this.SendPropertyChanged("Comment");
				this.OnCommentChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="NVarChar(30)")]
	public string Status
	{
		get
		{
			return this._Status;
		}
		set
		{
			if ((this._Status != value))
			{
				this.OnStatusChanging(value);
				this.SendPropertyChanging();
				this._Status = value;
				this.SendPropertyChanged("Status");
				this.OnStatusChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Issue_Courthearing", Storage="_Issue", ThisKey="IssueId", OtherKey="Id", IsForeignKey=true)]
	public Issue Issue
	{
		get
		{
			return this._Issue.Entity;
		}
		set
		{
			Issue previousValue = this._Issue.Entity;
			if (((previousValue != value) 
						|| (this._Issue.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Issue.Entity = null;
					previousValue.Courthearings.Remove(this);
				}
				this._Issue.Entity = value;
				if ((value != null))
				{
					value.Courthearings.Add(this);
					this._IssueId = value.Id;
				}
				else
				{
					this._IssueId = default(Nullable<int>);
				}
				this.SendPropertyChanged("Issue");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Employees")]
public partial class Employee : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private string _EmployeeName;
	
	private string _Address;
	
	private string _IdNumber;
	
	private string _Phone;
	
	private string _Email;
	
	private string _Described;
	
	private EntitySet<IssueLevel> _IssueLevels;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnEmployeeNameChanging(string value);
    partial void OnEmployeeNameChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnIdNumberChanging(string value);
    partial void OnIdNumberChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnDescribedChanging(string value);
    partial void OnDescribedChanged();
    #endregion
	
	public Employee()
	{
		this._IssueLevels = new EntitySet<IssueLevel>(new Action<IssueLevel>(this.attach_IssueLevels), new Action<IssueLevel>(this.detach_IssueLevels));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeName", DbType="NVarChar(50)")]
	public string EmployeeName
	{
		get
		{
			return this._EmployeeName;
		}
		set
		{
			if ((this._EmployeeName != value))
			{
				this.OnEmployeeNameChanging(value);
				this.SendPropertyChanging();
				this._EmployeeName = value;
				this.SendPropertyChanged("EmployeeName");
				this.OnEmployeeNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(150)")]
	public string Address
	{
		get
		{
			return this._Address;
		}
		set
		{
			if ((this._Address != value))
			{
				this.OnAddressChanging(value);
				this.SendPropertyChanging();
				this._Address = value;
				this.SendPropertyChanged("Address");
				this.OnAddressChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdNumber", DbType="NVarChar(30)")]
	public string IdNumber
	{
		get
		{
			return this._IdNumber;
		}
		set
		{
			if ((this._IdNumber != value))
			{
				this.OnIdNumberChanging(value);
				this.SendPropertyChanging();
				this._IdNumber = value;
				this.SendPropertyChanged("IdNumber");
				this.OnIdNumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NVarChar(20)")]
	public string Phone
	{
		get
		{
			return this._Phone;
		}
		set
		{
			if ((this._Phone != value))
			{
				this.OnPhoneChanging(value);
				this.SendPropertyChanging();
				this._Phone = value;
				this.SendPropertyChanged("Phone");
				this.OnPhoneChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(150)")]
	public string Email
	{
		get
		{
			return this._Email;
		}
		set
		{
			if ((this._Email != value))
			{
				this.OnEmailChanging(value);
				this.SendPropertyChanging();
				this._Email = value;
				this.SendPropertyChanged("Email");
				this.OnEmailChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Described", DbType="NVarChar(50)")]
	public string Described
	{
		get
		{
			return this._Described;
		}
		set
		{
			if ((this._Described != value))
			{
				this.OnDescribedChanging(value);
				this.SendPropertyChanging();
				this._Described = value;
				this.SendPropertyChanged("Described");
				this.OnDescribedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_IssueLevel", Storage="_IssueLevels", ThisKey="Id", OtherKey="EmployeeId")]
	public EntitySet<IssueLevel> IssueLevels
	{
		get
		{
			return this._IssueLevels;
		}
		set
		{
			this._IssueLevels.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_IssueLevels(IssueLevel entity)
	{
		this.SendPropertyChanging();
		entity.Employee = this;
	}
	
	private void detach_IssueLevels(IssueLevel entity)
	{
		this.SendPropertyChanging();
		entity.Employee = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FollowUpIssue")]
public partial class FollowUpIssue : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private System.Nullable<int> _IssueID;
	
	private System.Nullable<int> _LawyerId;
	
	private System.Nullable<int> _ClientId;
	
	private System.Nullable<int> _OpponentId;
	
	private EntitySet<IssueLevel> _IssueLevels;
	
	private EntityRef<Client> _Client;
	
	private EntityRef<Issue> _Issue;
	
	private EntityRef<Lawyer> _Lawyer;
	
	private EntityRef<Opponent> _Opponent;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIssueIDChanging(System.Nullable<int> value);
    partial void OnIssueIDChanged();
    partial void OnLawyerIdChanging(System.Nullable<int> value);
    partial void OnLawyerIdChanged();
    partial void OnClientIdChanging(System.Nullable<int> value);
    partial void OnClientIdChanged();
    partial void OnOpponentIdChanging(System.Nullable<int> value);
    partial void OnOpponentIdChanged();
    #endregion
	
	public FollowUpIssue()
	{
		this._IssueLevels = new EntitySet<IssueLevel>(new Action<IssueLevel>(this.attach_IssueLevels), new Action<IssueLevel>(this.detach_IssueLevels));
		this._Client = default(EntityRef<Client>);
		this._Issue = default(EntityRef<Issue>);
		this._Lawyer = default(EntityRef<Lawyer>);
		this._Opponent = default(EntityRef<Opponent>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IssueID", DbType="Int")]
	public System.Nullable<int> IssueID
	{
		get
		{
			return this._IssueID;
		}
		set
		{
			if ((this._IssueID != value))
			{
				if (this._Issue.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnIssueIDChanging(value);
				this.SendPropertyChanging();
				this._IssueID = value;
				this.SendPropertyChanged("IssueID");
				this.OnIssueIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LawyerId", DbType="Int")]
	public System.Nullable<int> LawyerId
	{
		get
		{
			return this._LawyerId;
		}
		set
		{
			if ((this._LawyerId != value))
			{
				if (this._Lawyer.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnLawyerIdChanging(value);
				this.SendPropertyChanging();
				this._LawyerId = value;
				this.SendPropertyChanged("LawyerId");
				this.OnLawyerIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientId", DbType="Int")]
	public System.Nullable<int> ClientId
	{
		get
		{
			return this._ClientId;
		}
		set
		{
			if ((this._ClientId != value))
			{
				if (this._Client.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnClientIdChanging(value);
				this.SendPropertyChanging();
				this._ClientId = value;
				this.SendPropertyChanged("ClientId");
				this.OnClientIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OpponentId", DbType="Int")]
	public System.Nullable<int> OpponentId
	{
		get
		{
			return this._OpponentId;
		}
		set
		{
			if ((this._OpponentId != value))
			{
				if (this._Opponent.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnOpponentIdChanging(value);
				this.SendPropertyChanging();
				this._OpponentId = value;
				this.SendPropertyChanged("OpponentId");
				this.OnOpponentIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FollowUpIssue_IssueLevel", Storage="_IssueLevels", ThisKey="Id", OtherKey="FollowUpIssueId")]
	public EntitySet<IssueLevel> IssueLevels
	{
		get
		{
			return this._IssueLevels;
		}
		set
		{
			this._IssueLevels.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_FollowUpIssue", Storage="_Client", ThisKey="ClientId", OtherKey="Id", IsForeignKey=true)]
	public Client Client
	{
		get
		{
			return this._Client.Entity;
		}
		set
		{
			Client previousValue = this._Client.Entity;
			if (((previousValue != value) 
						|| (this._Client.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Client.Entity = null;
					previousValue.FollowUpIssues.Remove(this);
				}
				this._Client.Entity = value;
				if ((value != null))
				{
					value.FollowUpIssues.Add(this);
					this._ClientId = value.Id;
				}
				else
				{
					this._ClientId = default(Nullable<int>);
				}
				this.SendPropertyChanged("Client");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Issue_FollowUpIssue", Storage="_Issue", ThisKey="IssueID", OtherKey="Id", IsForeignKey=true)]
	public Issue Issue
	{
		get
		{
			return this._Issue.Entity;
		}
		set
		{
			Issue previousValue = this._Issue.Entity;
			if (((previousValue != value) 
						|| (this._Issue.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Issue.Entity = null;
					previousValue.FollowUpIssues.Remove(this);
				}
				this._Issue.Entity = value;
				if ((value != null))
				{
					value.FollowUpIssues.Add(this);
					this._IssueID = value.Id;
				}
				else
				{
					this._IssueID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Issue");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Lawyer_FollowUpIssue", Storage="_Lawyer", ThisKey="LawyerId", OtherKey="Id", IsForeignKey=true)]
	public Lawyer Lawyer
	{
		get
		{
			return this._Lawyer.Entity;
		}
		set
		{
			Lawyer previousValue = this._Lawyer.Entity;
			if (((previousValue != value) 
						|| (this._Lawyer.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Lawyer.Entity = null;
					previousValue.FollowUpIssues.Remove(this);
				}
				this._Lawyer.Entity = value;
				if ((value != null))
				{
					value.FollowUpIssues.Add(this);
					this._LawyerId = value.Id;
				}
				else
				{
					this._LawyerId = default(Nullable<int>);
				}
				this.SendPropertyChanged("Lawyer");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Opponent_FollowUpIssue", Storage="_Opponent", ThisKey="OpponentId", OtherKey="Id", IsForeignKey=true)]
	public Opponent Opponent
	{
		get
		{
			return this._Opponent.Entity;
		}
		set
		{
			Opponent previousValue = this._Opponent.Entity;
			if (((previousValue != value) 
						|| (this._Opponent.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Opponent.Entity = null;
					previousValue.FollowUpIssues.Remove(this);
				}
				this._Opponent.Entity = value;
				if ((value != null))
				{
					value.FollowUpIssues.Add(this);
					this._OpponentId = value.Id;
				}
				else
				{
					this._OpponentId = default(Nullable<int>);
				}
				this.SendPropertyChanged("Opponent");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_IssueLevels(IssueLevel entity)
	{
		this.SendPropertyChanging();
		entity.FollowUpIssue = this;
	}
	
	private void detach_IssueLevels(IssueLevel entity)
	{
		this.SendPropertyChanging();
		entity.FollowUpIssue = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.InBox")]
public partial class InBox : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private string _Subject;
	
	private int _SenderId;
	
	private int _ReciverId;
	
	private string _MessageText;
	
	private System.Nullable<System.DateTime> _DateOfMessage;
	
	private string _Status;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnSubjectChanging(string value);
    partial void OnSubjectChanged();
    partial void OnSenderIdChanging(int value);
    partial void OnSenderIdChanged();
    partial void OnReciverIdChanging(int value);
    partial void OnReciverIdChanged();
    partial void OnMessageTextChanging(string value);
    partial void OnMessageTextChanged();
    partial void OnDateOfMessageChanging(System.Nullable<System.DateTime> value);
    partial void OnDateOfMessageChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    #endregion
	
	public InBox()
	{
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Subject", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string Subject
	{
		get
		{
			return this._Subject;
		}
		set
		{
			if ((this._Subject != value))
			{
				this.OnSubjectChanging(value);
				this.SendPropertyChanging();
				this._Subject = value;
				this.SendPropertyChanged("Subject");
				this.OnSubjectChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SenderId", DbType="Int NOT NULL")]
	public int SenderId
	{
		get
		{
			return this._SenderId;
		}
		set
		{
			if ((this._SenderId != value))
			{
				this.OnSenderIdChanging(value);
				this.SendPropertyChanging();
				this._SenderId = value;
				this.SendPropertyChanged("SenderId");
				this.OnSenderIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReciverId", DbType="Int NOT NULL")]
	public int ReciverId
	{
		get
		{
			return this._ReciverId;
		}
		set
		{
			if ((this._ReciverId != value))
			{
				this.OnReciverIdChanging(value);
				this.SendPropertyChanging();
				this._ReciverId = value;
				this.SendPropertyChanged("ReciverId");
				this.OnReciverIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MessageText", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string MessageText
	{
		get
		{
			return this._MessageText;
		}
		set
		{
			if ((this._MessageText != value))
			{
				this.OnMessageTextChanging(value);
				this.SendPropertyChanging();
				this._MessageText = value;
				this.SendPropertyChanged("MessageText");
				this.OnMessageTextChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfMessage", DbType="DateTime")]
	public System.Nullable<System.DateTime> DateOfMessage
	{
		get
		{
			return this._DateOfMessage;
		}
		set
		{
			if ((this._DateOfMessage != value))
			{
				this.OnDateOfMessageChanging(value);
				this.SendPropertyChanging();
				this._DateOfMessage = value;
				this.SendPropertyChanged("DateOfMessage");
				this.OnDateOfMessageChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="NVarChar(50)")]
	public string Status
	{
		get
		{
			return this._Status;
		}
		set
		{
			if ((this._Status != value))
			{
				this.OnStatusChanging(value);
				this.SendPropertyChanging();
				this._Status = value;
				this.SendPropertyChanged("Status");
				this.OnStatusChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.IssueLevel")]
public partial class IssueLevel : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private string _LevelName;
	
	private double _TotalCost;
	
	private double _Payment;
	
	private System.Nullable<double> _Remain;
	
	private System.Nullable<System.DateTime> _TheDate;
	
	private System.Nullable<int> _EmployeeId;
	
	private string _Status;
	
	private System.Nullable<int> _FollowUpIssueId;
	
	private EntityRef<Employee> _Employee;
	
	private EntityRef<FollowUpIssue> _FollowUpIssue;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnLevelNameChanging(string value);
    partial void OnLevelNameChanged();
    partial void OnTotalCostChanging(double value);
    partial void OnTotalCostChanged();
    partial void OnPaymentChanging(double value);
    partial void OnPaymentChanged();
    partial void OnRemainChanging(System.Nullable<double> value);
    partial void OnRemainChanged();
    partial void OnTheDateChanging(System.Nullable<System.DateTime> value);
    partial void OnTheDateChanged();
    partial void OnEmployeeIdChanging(System.Nullable<int> value);
    partial void OnEmployeeIdChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnFollowUpIssueIdChanging(System.Nullable<int> value);
    partial void OnFollowUpIssueIdChanged();
    #endregion
	
	public IssueLevel()
	{
		this._Employee = default(EntityRef<Employee>);
		this._FollowUpIssue = default(EntityRef<FollowUpIssue>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LevelName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
	public string LevelName
	{
		get
		{
			return this._LevelName;
		}
		set
		{
			if ((this._LevelName != value))
			{
				this.OnLevelNameChanging(value);
				this.SendPropertyChanging();
				this._LevelName = value;
				this.SendPropertyChanged("LevelName");
				this.OnLevelNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalCost", DbType="Float NOT NULL")]
	public double TotalCost
	{
		get
		{
			return this._TotalCost;
		}
		set
		{
			if ((this._TotalCost != value))
			{
				this.OnTotalCostChanging(value);
				this.SendPropertyChanging();
				this._TotalCost = value;
				this.SendPropertyChanged("TotalCost");
				this.OnTotalCostChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Payment", DbType="Float NOT NULL")]
	public double Payment
	{
		get
		{
			return this._Payment;
		}
		set
		{
			if ((this._Payment != value))
			{
				this.OnPaymentChanging(value);
				this.SendPropertyChanging();
				this._Payment = value;
				this.SendPropertyChanged("Payment");
				this.OnPaymentChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Remain", DbType="Float")]
	public System.Nullable<double> Remain
	{
		get
		{
			return this._Remain;
		}
		set
		{
			if ((this._Remain != value))
			{
				this.OnRemainChanging(value);
				this.SendPropertyChanging();
				this._Remain = value;
				this.SendPropertyChanged("Remain");
				this.OnRemainChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TheDate", DbType="DateTime")]
	public System.Nullable<System.DateTime> TheDate
	{
		get
		{
			return this._TheDate;
		}
		set
		{
			if ((this._TheDate != value))
			{
				this.OnTheDateChanging(value);
				this.SendPropertyChanging();
				this._TheDate = value;
				this.SendPropertyChanged("TheDate");
				this.OnTheDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeId", DbType="Int")]
	public System.Nullable<int> EmployeeId
	{
		get
		{
			return this._EmployeeId;
		}
		set
		{
			if ((this._EmployeeId != value))
			{
				if (this._Employee.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnEmployeeIdChanging(value);
				this.SendPropertyChanging();
				this._EmployeeId = value;
				this.SendPropertyChanged("EmployeeId");
				this.OnEmployeeIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="NVarChar(20)")]
	public string Status
	{
		get
		{
			return this._Status;
		}
		set
		{
			if ((this._Status != value))
			{
				this.OnStatusChanging(value);
				this.SendPropertyChanging();
				this._Status = value;
				this.SendPropertyChanged("Status");
				this.OnStatusChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FollowUpIssueId", DbType="Int")]
	public System.Nullable<int> FollowUpIssueId
	{
		get
		{
			return this._FollowUpIssueId;
		}
		set
		{
			if ((this._FollowUpIssueId != value))
			{
				if (this._FollowUpIssue.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnFollowUpIssueIdChanging(value);
				this.SendPropertyChanging();
				this._FollowUpIssueId = value;
				this.SendPropertyChanged("FollowUpIssueId");
				this.OnFollowUpIssueIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_IssueLevel", Storage="_Employee", ThisKey="EmployeeId", OtherKey="Id", IsForeignKey=true)]
	public Employee Employee
	{
		get
		{
			return this._Employee.Entity;
		}
		set
		{
			Employee previousValue = this._Employee.Entity;
			if (((previousValue != value) 
						|| (this._Employee.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Employee.Entity = null;
					previousValue.IssueLevels.Remove(this);
				}
				this._Employee.Entity = value;
				if ((value != null))
				{
					value.IssueLevels.Add(this);
					this._EmployeeId = value.Id;
				}
				else
				{
					this._EmployeeId = default(Nullable<int>);
				}
				this.SendPropertyChanged("Employee");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FollowUpIssue_IssueLevel", Storage="_FollowUpIssue", ThisKey="FollowUpIssueId", OtherKey="Id", IsForeignKey=true)]
	public FollowUpIssue FollowUpIssue
	{
		get
		{
			return this._FollowUpIssue.Entity;
		}
		set
		{
			FollowUpIssue previousValue = this._FollowUpIssue.Entity;
			if (((previousValue != value) 
						|| (this._FollowUpIssue.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._FollowUpIssue.Entity = null;
					previousValue.IssueLevels.Remove(this);
				}
				this._FollowUpIssue.Entity = value;
				if ((value != null))
				{
					value.IssueLevels.Add(this);
					this._FollowUpIssueId = value.Id;
				}
				else
				{
					this._FollowUpIssueId = default(Nullable<int>);
				}
				this.SendPropertyChanged("FollowUpIssue");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Issues")]
public partial class Issue : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private int _MainNumber;
	
	private int _NumberAtCourt;
	
	private int _NumberAtCourtComputer;
	
	private string _ProsecutorName;
	
	private string _CenterName;
	
	private System.Nullable<System.DateTime> _TheDate;
	
	private EntitySet<Attachment> _Attachments;
	
	private EntitySet<Courthearing> _Courthearings;
	
	private EntitySet<FollowUpIssue> _FollowUpIssues;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnMainNumberChanging(int value);
    partial void OnMainNumberChanged();
    partial void OnNumberAtCourtChanging(int value);
    partial void OnNumberAtCourtChanged();
    partial void OnNumberAtCourtComputerChanging(int value);
    partial void OnNumberAtCourtComputerChanged();
    partial void OnProsecutorNameChanging(string value);
    partial void OnProsecutorNameChanged();
    partial void OnCenterNameChanging(string value);
    partial void OnCenterNameChanged();
    partial void OnTheDateChanging(System.Nullable<System.DateTime> value);
    partial void OnTheDateChanged();
    #endregion
	
	public Issue()
	{
		this._Attachments = new EntitySet<Attachment>(new Action<Attachment>(this.attach_Attachments), new Action<Attachment>(this.detach_Attachments));
		this._Courthearings = new EntitySet<Courthearing>(new Action<Courthearing>(this.attach_Courthearings), new Action<Courthearing>(this.detach_Courthearings));
		this._FollowUpIssues = new EntitySet<FollowUpIssue>(new Action<FollowUpIssue>(this.attach_FollowUpIssues), new Action<FollowUpIssue>(this.detach_FollowUpIssues));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MainNumber", DbType="Int NOT NULL")]
	public int MainNumber
	{
		get
		{
			return this._MainNumber;
		}
		set
		{
			if ((this._MainNumber != value))
			{
				this.OnMainNumberChanging(value);
				this.SendPropertyChanging();
				this._MainNumber = value;
				this.SendPropertyChanged("MainNumber");
				this.OnMainNumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberAtCourt", DbType="Int NOT NULL")]
	public int NumberAtCourt
	{
		get
		{
			return this._NumberAtCourt;
		}
		set
		{
			if ((this._NumberAtCourt != value))
			{
				this.OnNumberAtCourtChanging(value);
				this.SendPropertyChanging();
				this._NumberAtCourt = value;
				this.SendPropertyChanged("NumberAtCourt");
				this.OnNumberAtCourtChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberAtCourtComputer", DbType="Int NOT NULL")]
	public int NumberAtCourtComputer
	{
		get
		{
			return this._NumberAtCourtComputer;
		}
		set
		{
			if ((this._NumberAtCourtComputer != value))
			{
				this.OnNumberAtCourtComputerChanging(value);
				this.SendPropertyChanging();
				this._NumberAtCourtComputer = value;
				this.SendPropertyChanged("NumberAtCourtComputer");
				this.OnNumberAtCourtComputerChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProsecutorName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string ProsecutorName
	{
		get
		{
			return this._ProsecutorName;
		}
		set
		{
			if ((this._ProsecutorName != value))
			{
				this.OnProsecutorNameChanging(value);
				this.SendPropertyChanging();
				this._ProsecutorName = value;
				this.SendPropertyChanged("ProsecutorName");
				this.OnProsecutorNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CenterName", DbType="NVarChar(50)")]
	public string CenterName
	{
		get
		{
			return this._CenterName;
		}
		set
		{
			if ((this._CenterName != value))
			{
				this.OnCenterNameChanging(value);
				this.SendPropertyChanging();
				this._CenterName = value;
				this.SendPropertyChanged("CenterName");
				this.OnCenterNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TheDate", DbType="DateTime")]
	public System.Nullable<System.DateTime> TheDate
	{
		get
		{
			return this._TheDate;
		}
		set
		{
			if ((this._TheDate != value))
			{
				this.OnTheDateChanging(value);
				this.SendPropertyChanging();
				this._TheDate = value;
				this.SendPropertyChanged("TheDate");
				this.OnTheDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Issue_Attachment", Storage="_Attachments", ThisKey="Id", OtherKey="IssueId")]
	public EntitySet<Attachment> Attachments
	{
		get
		{
			return this._Attachments;
		}
		set
		{
			this._Attachments.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Issue_Courthearing", Storage="_Courthearings", ThisKey="Id", OtherKey="IssueId")]
	public EntitySet<Courthearing> Courthearings
	{
		get
		{
			return this._Courthearings;
		}
		set
		{
			this._Courthearings.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Issue_FollowUpIssue", Storage="_FollowUpIssues", ThisKey="Id", OtherKey="IssueID")]
	public EntitySet<FollowUpIssue> FollowUpIssues
	{
		get
		{
			return this._FollowUpIssues;
		}
		set
		{
			this._FollowUpIssues.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Attachments(Attachment entity)
	{
		this.SendPropertyChanging();
		entity.Issue = this;
	}
	
	private void detach_Attachments(Attachment entity)
	{
		this.SendPropertyChanging();
		entity.Issue = null;
	}
	
	private void attach_Courthearings(Courthearing entity)
	{
		this.SendPropertyChanging();
		entity.Issue = this;
	}
	
	private void detach_Courthearings(Courthearing entity)
	{
		this.SendPropertyChanging();
		entity.Issue = null;
	}
	
	private void attach_FollowUpIssues(FollowUpIssue entity)
	{
		this.SendPropertyChanging();
		entity.Issue = this;
	}
	
	private void detach_FollowUpIssues(FollowUpIssue entity)
	{
		this.SendPropertyChanging();
		entity.Issue = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Lawyers")]
public partial class Lawyer : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private string _LawyerName;
	
	private string _Phone;
	
	private string _Address;
	
	private string _Describe;
	
	private EntitySet<FollowUpIssue> _FollowUpIssues;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnLawyerNameChanging(string value);
    partial void OnLawyerNameChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnDescribeChanging(string value);
    partial void OnDescribeChanged();
    #endregion
	
	public Lawyer()
	{
		this._FollowUpIssues = new EntitySet<FollowUpIssue>(new Action<FollowUpIssue>(this.attach_FollowUpIssues), new Action<FollowUpIssue>(this.detach_FollowUpIssues));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LawyerName", DbType="NVarChar(100)")]
	public string LawyerName
	{
		get
		{
			return this._LawyerName;
		}
		set
		{
			if ((this._LawyerName != value))
			{
				this.OnLawyerNameChanging(value);
				this.SendPropertyChanging();
				this._LawyerName = value;
				this.SendPropertyChanged("LawyerName");
				this.OnLawyerNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NVarChar(20)")]
	public string Phone
	{
		get
		{
			return this._Phone;
		}
		set
		{
			if ((this._Phone != value))
			{
				this.OnPhoneChanging(value);
				this.SendPropertyChanging();
				this._Phone = value;
				this.SendPropertyChanged("Phone");
				this.OnPhoneChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(50)")]
	public string Address
	{
		get
		{
			return this._Address;
		}
		set
		{
			if ((this._Address != value))
			{
				this.OnAddressChanging(value);
				this.SendPropertyChanging();
				this._Address = value;
				this.SendPropertyChanged("Address");
				this.OnAddressChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Describe", DbType="NVarChar(20)")]
	public string Describe
	{
		get
		{
			return this._Describe;
		}
		set
		{
			if ((this._Describe != value))
			{
				this.OnDescribeChanging(value);
				this.SendPropertyChanging();
				this._Describe = value;
				this.SendPropertyChanged("Describe");
				this.OnDescribeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Lawyer_FollowUpIssue", Storage="_FollowUpIssues", ThisKey="Id", OtherKey="LawyerId")]
	public EntitySet<FollowUpIssue> FollowUpIssues
	{
		get
		{
			return this._FollowUpIssues;
		}
		set
		{
			this._FollowUpIssues.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_FollowUpIssues(FollowUpIssue entity)
	{
		this.SendPropertyChanging();
		entity.Lawyer = this;
	}
	
	private void detach_FollowUpIssues(FollowUpIssue entity)
	{
		this.SendPropertyChanging();
		entity.Lawyer = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Opponents")]
public partial class Opponent : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private string _OpponentName;
	
	private string _Described;
	
	private string _Address;
	
	private string _IdNumber;
	
	private string _Phone;
	
	private string _Email;
	
	private EntitySet<FollowUpIssue> _FollowUpIssues;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnOpponentNameChanging(string value);
    partial void OnOpponentNameChanged();
    partial void OnDescribedChanging(string value);
    partial void OnDescribedChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnIdNumberChanging(string value);
    partial void OnIdNumberChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    #endregion
	
	public Opponent()
	{
		this._FollowUpIssues = new EntitySet<FollowUpIssue>(new Action<FollowUpIssue>(this.attach_FollowUpIssues), new Action<FollowUpIssue>(this.detach_FollowUpIssues));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OpponentName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string OpponentName
	{
		get
		{
			return this._OpponentName;
		}
		set
		{
			if ((this._OpponentName != value))
			{
				this.OnOpponentNameChanging(value);
				this.SendPropertyChanging();
				this._OpponentName = value;
				this.SendPropertyChanged("OpponentName");
				this.OnOpponentNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Described", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
	public string Described
	{
		get
		{
			return this._Described;
		}
		set
		{
			if ((this._Described != value))
			{
				this.OnDescribedChanging(value);
				this.SendPropertyChanging();
				this._Described = value;
				this.SendPropertyChanged("Described");
				this.OnDescribedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
	public string Address
	{
		get
		{
			return this._Address;
		}
		set
		{
			if ((this._Address != value))
			{
				this.OnAddressChanging(value);
				this.SendPropertyChanging();
				this._Address = value;
				this.SendPropertyChanged("Address");
				this.OnAddressChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdNumber", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
	public string IdNumber
	{
		get
		{
			return this._IdNumber;
		}
		set
		{
			if ((this._IdNumber != value))
			{
				this.OnIdNumberChanging(value);
				this.SendPropertyChanging();
				this._IdNumber = value;
				this.SendPropertyChanged("IdNumber");
				this.OnIdNumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NVarChar(20)")]
	public string Phone
	{
		get
		{
			return this._Phone;
		}
		set
		{
			if ((this._Phone != value))
			{
				this.OnPhoneChanging(value);
				this.SendPropertyChanging();
				this._Phone = value;
				this.SendPropertyChanged("Phone");
				this.OnPhoneChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(150)")]
	public string Email
	{
		get
		{
			return this._Email;
		}
		set
		{
			if ((this._Email != value))
			{
				this.OnEmailChanging(value);
				this.SendPropertyChanging();
				this._Email = value;
				this.SendPropertyChanged("Email");
				this.OnEmailChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Opponent_FollowUpIssue", Storage="_FollowUpIssues", ThisKey="Id", OtherKey="OpponentId")]
	public EntitySet<FollowUpIssue> FollowUpIssues
	{
		get
		{
			return this._FollowUpIssues;
		}
		set
		{
			this._FollowUpIssues.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_FollowUpIssues(FollowUpIssue entity)
	{
		this.SendPropertyChanging();
		entity.Opponent = this;
	}
	
	private void detach_FollowUpIssues(FollowUpIssue entity)
	{
		this.SendPropertyChanging();
		entity.Opponent = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OutBox")]
public partial class OutBox : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private string _Subject;
	
	private System.Nullable<int> _SenderId;
	
	private System.Nullable<int> _ReciverId;
	
	private string _MessageText;
	
	private System.Nullable<System.DateTime> _DateofMessage;
	
	private string _Status;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnSubjectChanging(string value);
    partial void OnSubjectChanged();
    partial void OnSenderIdChanging(System.Nullable<int> value);
    partial void OnSenderIdChanged();
    partial void OnReciverIdChanging(System.Nullable<int> value);
    partial void OnReciverIdChanged();
    partial void OnMessageTextChanging(string value);
    partial void OnMessageTextChanged();
    partial void OnDateofMessageChanging(System.Nullable<System.DateTime> value);
    partial void OnDateofMessageChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    #endregion
	
	public OutBox()
	{
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Subject", DbType="NVarChar(50)")]
	public string Subject
	{
		get
		{
			return this._Subject;
		}
		set
		{
			if ((this._Subject != value))
			{
				this.OnSubjectChanging(value);
				this.SendPropertyChanging();
				this._Subject = value;
				this.SendPropertyChanged("Subject");
				this.OnSubjectChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SenderId", DbType="Int")]
	public System.Nullable<int> SenderId
	{
		get
		{
			return this._SenderId;
		}
		set
		{
			if ((this._SenderId != value))
			{
				this.OnSenderIdChanging(value);
				this.SendPropertyChanging();
				this._SenderId = value;
				this.SendPropertyChanged("SenderId");
				this.OnSenderIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReciverId", DbType="Int")]
	public System.Nullable<int> ReciverId
	{
		get
		{
			return this._ReciverId;
		}
		set
		{
			if ((this._ReciverId != value))
			{
				this.OnReciverIdChanging(value);
				this.SendPropertyChanging();
				this._ReciverId = value;
				this.SendPropertyChanged("ReciverId");
				this.OnReciverIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MessageText", DbType="NVarChar(MAX)")]
	public string MessageText
	{
		get
		{
			return this._MessageText;
		}
		set
		{
			if ((this._MessageText != value))
			{
				this.OnMessageTextChanging(value);
				this.SendPropertyChanging();
				this._MessageText = value;
				this.SendPropertyChanged("MessageText");
				this.OnMessageTextChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateofMessage", DbType="DateTime")]
	public System.Nullable<System.DateTime> DateofMessage
	{
		get
		{
			return this._DateofMessage;
		}
		set
		{
			if ((this._DateofMessage != value))
			{
				this.OnDateofMessageChanging(value);
				this.SendPropertyChanging();
				this._DateofMessage = value;
				this.SendPropertyChanged("DateofMessage");
				this.OnDateofMessageChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="NVarChar(50)")]
	public string Status
	{
		get
		{
			return this._Status;
		}
		set
		{
			if ((this._Status != value))
			{
				this.OnStatusChanging(value);
				this.SendPropertyChanging();
				this._Status = value;
				this.SendPropertyChanged("Status");
				this.OnStatusChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private string _UserName;
	
	private string _UserPassword;
	
	private string _Phone;
	
	private string _Address;
	
	private string _Email;
	
	private string _Gender;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnUserPasswordChanging(string value);
    partial void OnUserPasswordChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnGenderChanging(string value);
    partial void OnGenderChanged();
    #endregion
	
	public User()
	{
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string UserName
	{
		get
		{
			return this._UserName;
		}
		set
		{
			if ((this._UserName != value))
			{
				this.OnUserNameChanging(value);
				this.SendPropertyChanging();
				this._UserName = value;
				this.SendPropertyChanged("UserName");
				this.OnUserNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserPassword", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string UserPassword
	{
		get
		{
			return this._UserPassword;
		}
		set
		{
			if ((this._UserPassword != value))
			{
				this.OnUserPasswordChanging(value);
				this.SendPropertyChanging();
				this._UserPassword = value;
				this.SendPropertyChanged("UserPassword");
				this.OnUserPasswordChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NVarChar(50)")]
	public string Phone
	{
		get
		{
			return this._Phone;
		}
		set
		{
			if ((this._Phone != value))
			{
				this.OnPhoneChanging(value);
				this.SendPropertyChanging();
				this._Phone = value;
				this.SendPropertyChanged("Phone");
				this.OnPhoneChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(150)")]
	public string Address
	{
		get
		{
			return this._Address;
		}
		set
		{
			if ((this._Address != value))
			{
				this.OnAddressChanging(value);
				this.SendPropertyChanging();
				this._Address = value;
				this.SendPropertyChanged("Address");
				this.OnAddressChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(150)")]
	public string Email
	{
		get
		{
			return this._Email;
		}
		set
		{
			if ((this._Email != value))
			{
				this.OnEmailChanging(value);
				this.SendPropertyChanging();
				this._Email = value;
				this.SendPropertyChanged("Email");
				this.OnEmailChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="NVarChar(50)")]
	public string Gender
	{
		get
		{
			return this._Gender;
		}
		set
		{
			if ((this._Gender != value))
			{
				this.OnGenderChanging(value);
				this.SendPropertyChanging();
				this._Gender = value;
				this.SendPropertyChanged("Gender");
				this.OnGenderChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}
#pragma warning restore 1591
